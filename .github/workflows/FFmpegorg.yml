name: CI

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number to build'
        required: true
        default: '8.0'
concurrency:
  group: ${{ github.ref }}-ffmpegorg
  cancel-in-progress: false

jobs:
  build-or-not:
    name: "Build or not"
    runs-on: ubuntu-latest
    outputs:
      ff: ${{ steps.set_ff.outputs.ff }}
      avcodec: ${{ steps.set_ff.outputs.avcodec }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
      - name: Write version to env
        id: set_ff
        run: |
          FF_VER=$(curl -s https://www.ffmpeg.org/download.html | grep -o -m 1 'FFmpeg [0-9.]* ".*"' | cut -d ' ' -f 2)
          FF_VER=7.1.1
          SO=$(curl -s https://git.ffmpeg.org/gitweb/ffmpeg.git/blob_plain/n${FF_VER}:/libavcodec/version_major.h |grep -oP 'LIBAVCODEC_VERSION_MAJOR\s+\K\d+')
          # Do not build existing binary
          curl -s -o /dev/null -w "%{http_code}" https://github.com/oech3/Chromium-FFmpeg/releases/download/download/${{ github.event.inputs.version }}/ffmpeg-${{ github.event.inputs.version }}-linux-x64.tar.zst|grep -q 404
          echo "avcodec=$SO" >> $GITHUB_OUTPUT
          echo "ff=$FF_VER" >> $GITHUB_OUTPUT

  build:
    needs: build-or-not
    name: "Build for ${{ matrix.target }}"
    runs-on: ${{ matrix.host }}
    strategy:
      matrix:
        target: [linux-x64]
        include:
          - target: linux-x64
            host: ubuntu-latest
            setupcmd: sudo apt-get update && sudo apt-get install -y nasm
            soname: libffmpeg.so
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
      - name: Setup build tools
        run: ${{ matrix.setupcmd }}
      - name: Build
        working-directory: ${{ github.workspace }}
        run: |
          mkdir -p /tmp/ff
          cd /tmp/ff
          curl https://ffmpeg.org/releases/ffmpeg-${{ needs.build-or-not.outputs.ff }}.tar.xz | tar --strip-components=1 -xJf -
          cd ff
          bash ${{ github.workspace }}/patch-ffmpegorg-chromium.sh ffmpegorg
          MAKEFLAGS=-j4 bash ${{ github.workspace }}/build.sh ${{ matrix.target }}
          mv ${{ matrix.soname }} ${{ matrix.soname }}.${{ needs.build-or-not.outputs.avcodec }}
          tar -I 'zstd -19' -cf ffmpeg-${{ needs.build-or-not.outputs.ff }}-${{ matrix.target }}.tar.zst ${{ matrix.soname }}.${{ needs.build-or-not.outputs.avcodec }}
      - name: Upload the artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ${{ matrix.target }}
          path: '/tmp/ff/*.tar.zst'

  build-release:
    needs: [ build-or-not, build ]
    name: "Build Release"
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/download-artifact@v4.3.0
        with:
          # all: true
          path: release/

      - name: Upload binaries to release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release/*/*.tar.zst
          tag_name: ${{ needs.build-or-not.outputs.ff }}
          body: |
            avcodec${{ needs.build-or-not.outputs.avcodec }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
